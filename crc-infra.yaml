---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  The backend infrastructure for my cloud resume challenge

Parameters:
  # FIXME set input constraints for these
  S3BucketName:
    Description: "The name of the S3 bucket that will store the static website files"
    Type: String
    Default: "sams-neheath-bucket"
  WebsiteDomainName:
    Description: "The name of the website this stack will be deployed for"
    Type: String
    Default: "portfolio.ne-heath.com"
    # ConstraintDescription: Only valid domain names
    # AllowedPattern: "\/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$"

Globals:
  Function:
    Timeout: 5


Resources:

  # S3
  ## Static site hosting bucket
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: S3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - 
            AllowedMethods: 
              - GET
              - HEAD
            AllowedOrigins: 
              - "*"
            AllowedHeaders: 
              - "*"
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"
  
  ## Bucket policy of the static website hosting bucket
  WebsiteBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: PublicAccessPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal:
                CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
              Action: 's3:GetObject'
              Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
        Bucket: !Ref WebsiteBucket
  
  # CloudFront
  ## CloudFront OAI for the website bucket policy
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: !Sub "The OAI for the bucket: ${S3BucketName}"
            
  ## Cloudfront distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub "${S3BucketName}.s3.amazonaws.com"
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        Enabled: 'true'
        Comment: Static main website distribution
        DefaultRootObject: index.html
        Aliases:
          - !Ref WebsiteDomainName
          - !Sub "www.${WebsiteDomainName}"
        DefaultCacheBehavior:
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          Compress: true
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:410342199596:certificate/e08958c3-3953-4332-8490-feb8e2712b6d
          SslSupportMethod: sni-only

  DDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      Tags:
        CostCenter: !Ref WebsiteDomainName
  
  ### FIXME can replace with SAM policy templates, see below
  ## Lambda role to access visitorCount in DynamoDB
  VisitorCounterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"

  ## Lambda function to retrieve visitorCount from DynamoDB
  VisitorCounterFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: VisitorCounter/
      Handler: visitorCounterLambda.handler
      Runtime: python3.8
      Role: !GetAtt VisitorCounterFunctionRole.Arn
      Environment:
          Variables: 
            databaseName : !Ref DDBTable
      Events:
        VisitorCounter:
          Type: Api 
          Properties:
            Path: /visitorCount
            Method: get
      # This is the preferred way. I'd need to modify my deploy role's permissions however
      # Which I am not in the mood for right now. Maybe later
      # Policies:
      #   - DynamoDBCrudPolicy:
      #       TableName: !Ref DDBTable
      Tags:
        CostCenter: !Ref WebsiteDomainName

  ## The main A record to redirect to the CF distribution
  DNSRecordMain:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${WebsiteDomainName}"
      Type: A
      HostedZoneId: Z00284083DT8WLS19HGXS
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
 
  VisitorCounterApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for visitorCounter function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/visitorCount/"
